@startuml TextAdventure Class Diagram
package es.hugoalvarezajenjo.textadventure {
    package model {
        class Player {
            - health: int
            - weapon: Weapon
            + new(health: int, weapon: Weapon): Player
        }

        abstract Weapon{
            - name: String
            - damage: int
            + new(name: String, damage: int): Weapon
            + getName(): String
            + getDamage(): int
        }

        class Knife {
            + new(): Knife
        }
        class LongSword {
            + new(): LongSword
        }

        class Story {
            - title: String
            - choice1: String
            - choice2: String
            - choice3: String
            - choice4: String
            + new(title: String, choice1: String, choice2: String, choice3: String, choice4: String): Story
        }
    }

    package logic {
        class PlayerManager <<controller>>{
            - player: Player
            + new(): PlayerManager
            + getPlayerHp(): int
            + getPlayerWeaponName(): String
        }

        class StoryManager <<controller>> {
            - story: Story
            + new(): StoryManager
            + getStoryTitle(): String
            + getStoryChoices(): String[]
            + makeChoice(choice: String): boolean
        }
    }

    package ui {
        class MainWindow <<UI>> {
            + new(): MainWindow
        }
        class MainWindowController <<UIController>> {
            - mainWindow: MainWindow
            + new(mainWindow: MainWindow): MainWindowController
            + showStartScreen()
            + showChoiceScreen()
        }
        abstract WindowScreen <<UI>> {
            + new(): WindowScreen
        }

        package theme {
            class Fonts {
                + {static} TITLE_FONT: Font
                + {static} NORMAL_FONT: Font
            }
        }

        package startscreen {
            class StartScreen <<UI>> {
                +new(onStartButtonClick: ActionListener)
            }
            class StartButtonListener <<ViewListener>> {
                - mainWindowController: MainWindowController
                + new(mainWindowController: MainWindowController): StartButtonListener
                + actionPerformed(event: ActionEvent)
            }
        }

        package choicescreen {
            class ChoiceScreen <<UI>> {
                + setHp(hp: int)
                + setWeaponName(weaponName: WeaponName)
                + setStoryTitle(title: String)
                + setStoryChoices(choice: String[])
            }
            class ChoiceScreenController <<UIController>> {
                - choicescreen: ChoiceScreen
                - playerManager: PlayerManager
                - storyManager: StoryManager
                + new(choiceScreen: ChoiceScreen, playerManager: PlayerManager, storyManager: StoryManager): ChoiceScreenController
                - updateHp(hp: int)
                - updateWeaponName(weaponName: WeaponName)
                - updateStoryTitle(title: String)
                - updateStoryChoices(choice: String[])
                - updateStory()
                + notifyChoice(choice: String)
            }
            class ChoiceButtonListener <<ViewListener>> {
                - controller: ChoiceScreenController
                + setController(controller: ChoiceScreenController)
                + actionPerformed(event: ActionEvent)
            }
        }

    }

    class Main <<system>>{
        + {static} main(args: String[])
    }
}

WindowScreen <|-- StartScreen
WindowScreen <|-- ChoiceScreen

Weapon <|-- Knife
Weapon <|-- LongSword

Main --> MainWindowController

MainWindowController -> MainWindow

MainWindow *--> WindowScreen

StartButtonListener <- StartScreen
MainWindowController <-- StartButtonListener

ChoiceScreen <- ChoiceScreenController
ChoiceScreen --> ChoiceButtonListener
ChoiceScreenController <-- ChoiceButtonListener
ChoiceScreenController ---> PlayerManager
ChoiceScreenController ---> StoryManager


PlayerManager --> Player

Player *--> Weapon

StoryManager *--> Story

@enduml
